# sum of four number: find the pairs of 4 numbers in an array that sum up 
#to a given number

TIME: Avergae: O(n2) Worst: O(n3)
space: Avergae: O(n2) Worst: O(n3)

def fourNumberSum(array, targetsum):
	allPairsSums = {}
	quadruplets = []
	for i in range(1, len(array)-1):
		for j in range(i+1, len(array)):
			currentSum = array[i] + array[j]
			difference = targetsum - currentSum
			if difference is in allPairsSums:
				for pair in allPairsSums[difference]:
					quadruplets.append(pair + [array[i],array[j]])
		for k in range(0, i):
				currentSum = array[i] + array[k]
				if currentSum not in allPairsSums:
					allPairsSums[currentSum] = [array[k], array[i]]
				currentSum.append([array[k], array[i]])
	return quadruplets


#triple sum as four sum 
# O(n^2) time | O(n) space
def threeNumberSum(array, targetSum):
	array.sort()
	triplets = []
	for i in range(len(array) - 2):
		left = i + 1
		right = len(array) - 1
		while left < right:
			currentSum = array[i] + array[left] + array[right]
			if currentSum == targetSum:
				triplets.append([array[i], array[left], array[right]])
				left += 1
				right -= 1
			elif currentSum < targetSum:
				left += 1
			elif currentSum > targetSum:
				right -= 1
	return triplets