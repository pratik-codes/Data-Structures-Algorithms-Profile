#Spiral traverse
#iterative way = time O(n) space O(n) where n is the total nuumber of the elemts in the array
def spiralTraverse(array):
	result = []
	startCol, endCol = 0, len(array[0]) - 1
	starRow, endRow = 0, len(array) - 1

	while starRow <= endRow and startCol <= endCol:
		for col in range(startCol, endcol + 1):
			result.append(array[startRow][col])

		for row in range(startRow+1, endcol+1):
			result.append(array[col][endcol])

		for col in reversed(range(startcol, endcol)):
			result.append([endRow][col])

		for row in reversed(range(startRow+1, endRow+1)):
			result.append(array[row][startCol])

		startcol += 1
		startRow += 1
		endRow -= 1
		endCol -= 1


	return result


#recursive way 

def spiralTraverse(array):
	result= []
	Spiralfill(array, 0, len(array) - 1, len(array[0] - 1, result))
	return result

def spiralFIll(array, startRow, endRow, startCol, endCol, result):
	if startRow > endRow or startCol > endCol:
		return
	for col in range(startCol, endcol + 1):
			result.append(array[startRow][col])

	for row in range(startRow+1, endcol+1):
		result.append(array[col][endcol])

	for col in reversed(range(startcol, endcol)):
		result.append([endRow][col])

	for row in reversed(range(startRow+1, endRow+1)):
		result.append(array[row][startCol])

	spiralFIll(array, starRow + 1, endRow - 1, startCol + 1, endCol - 1, result)

#Validate BST 

def validatateBST:
	return  ValidateBSTHelper(tree, float("-inf"), float("inf"))

def ValidBSTHelper(tree, minValue, maxValue):
	if tree is none:
		return true 
	if tree.value < maxValue and tree.value  > minValue:
		return true
	leftisValid = ValidateBSTHelper(tree.left, minvalue, tree.value)
	return leftisValid and validatateBST(tree.right, tree.value, maxvalue)
