## Two Number
##  Write a function that takes in non empty array of distinct intergres and an inteher and an integer representing a target sum. If any two numbers in the input array sum up to the target sum, the function should return themm in a array, in sorted order. if no two numbers  sum up tp the the target sum, the function should return an empty array. Assume that there will be at most one pair of Numbers summing up to the target sum

#soln1
# O(n^2) time | O(1) space

def twoNumberSum(array, targetSum):
    for i in range(len(array) - 1):
        firstNum = array[i]
        for j in range(i + 1, len(array)):
            secondNum = array[j]
            if firstNum + secondNum == targetSum:
                return [firstNum, secondNum]
    return []

#soln2

# O(n) time | O(n) space
def twoNumberSum(array, targetSum):
 nums = {}
 for num in array:
 potentialMatch = targetSum - num
 if potentialMatch in nums:
 return [potentialMatch, num]
 else:
 nums[num] = True
 return []


# soln3

# O(nlog(n)) | O(1) space
def twoNumberSum(array, targetSum):
 array.sort()
 left = 0
 right = len(array) - 1
 while left < right:
 currentSum = array[left] + array[right]
 if currentSum == targetSum:
 return [array[left], array[right]]
 elif currentSum < targetSum:
 left += 1
 elif currentSum > targetSum:
 right -= 1
 return []

## closest Num 
##give Bst find the closest nu in the nodes of a Bst with the given number

#APPROACH 1

# Average: O(log(n)) time | O(1) space # Worst: O(n) time | O(1) space def findClosestValueInBst(tree, target):    return findClosestValueInBstHelper(tree, target, float("inf"))
def findClosestValueInBstHelper(tree, target, closest):
    currentNode = tree    while currentNode is not None:
        if abs(target - closest) > abs(target - currentNode.value):
            closest = currentNode.value
        if target < currentNode.value:
            currentNode = currentNode.left
        elif target > currentNode.value:
            currentNode = currentNode.right
        else:
            break    
return closest

# SOLN2

# Average: O(log(n)) time | O(1) space
# Worst: O(n) time | O(1) space
def findClosestValueInBst(tree, target):
 return findClosestValueInBstHelper(tree, target, float("inf"))
def findClosestValueInBstHelper(tree, target, closest):
 currentNode = tree
 while currentNode is not None:
 if abs(target - closest) > abs(target - currentNode.value):
 closest = currentNode.value
 if target < currentNode.value:
 currentNode = currentNode.left
 elif target > currentNode.value:
 currentNode = currentNode.right
 else:
 break
 return closest

