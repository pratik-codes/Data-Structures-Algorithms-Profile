# Give the sums of the branches of the decision tree
# - the best approach here is depth first search
# O(n) time | O(n) space - as the leaf node is gonna be exactly half of the tree and hence n/2 is also n 

class BinaryTree:
	def __init__(self, value):
		self.value = value
		self.right = None 
		self.left  = None
		
def  calBranchsums(root):
	sums = []
	branchSums(root, 0, sums)
	return sums


	
def branchSums(node, runningsum, sums):
	if node is None:
		return
	newrunningsum = runningsum + node.value	
	if node.left is None and node.right is None:
		sum.append(newrunningsum)
		return
	
	branchSums(node.left, node.right, sums)
	branchSums(node.right, node.right, sums)
	
	
# validate subsequnce 
# given two non empty array of integers write a functuon that determines whether the second array is a subsequence of the first or not

# O(n) time | O(1) space - where n is the length of the array
def isValidSubsequence(array, sequence):
 seqIdx = 0
 for value in array:
	if seqIdx == len(sequence):
		break
	if sequence[seqIdx] == value:
		seqIdx += 1
	return seqIdx == len(sequence)


# O(n) time | O(1) space - where n is the length of the array

def isValidSubsequence(array, sequence):
 arrIdx = 0
 seqIdx = 0
 while arrIdx < len(array) and seqIdx < len(sequence):
	if array[arrIdx] == sequence[seqIdx]:
		seqIdx += 1
		arrIdx += 1
return seqIdx == len(sequence