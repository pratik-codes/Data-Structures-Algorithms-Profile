
# bubble sort
# time: o(n^2) , Space: 0(1)


def bubblesort(array):
	isSorted = False
	While not isSorted
		isSorted = True
		for i in range(len(array) - 1):
			if array[i] > array[i+1]:
				swap(i, i+1,  array)
				isSorted = False 
	return array	
	
def swap(i , j, array):
	array[i], array[j] = array[j], array[i]
	
	
# insertion sort
# time: o(n^2) , Space: 0(1)
# average and worst case scenario is same

def InsertionSort(array):
	for i in range(1, len(array)):
	j = i 
	while j>0 and array[j] < array[j-1]:
		swap(j, j-1, array)
		j -= 1
	return array
	
def swap(i, j, array):
	array[i], array[j] = array[j], array[i]


# Selection sort 
# time: o(n^2) , Space: 0(1)

def selectionSort(array):
	currentIndex = 0
	while currentIndex < len(array) - 1:
	smallestIndex = currentIndex
	for i in range(currentIndex, len(array)):
		if array[smallestIndex] > array[i]:
			smallestIndex = i
	swap(currentIndex, smallestIndex ,array)
	currentIndex += 1

def swap(i, j, array):
	array[i], array[j] = array[j], array[i]	